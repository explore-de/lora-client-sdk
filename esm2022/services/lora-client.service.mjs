import { Injectable } from '@angular/core';
import ClientError from "../types/ClientError";
import * as i0 from "@angular/core";
export var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus["DISCONNECTED"] = "disconnected";
    ConnectionStatus["CONNECTED"] = "connected";
    ConnectionStatus["CONNECTING"] = "connecting";
    ConnectionStatus["ERROR"] = "error";
})(ConnectionStatus || (ConnectionStatus = {}));
var MessageStatus;
(function (MessageStatus) {
    MessageStatus[MessageStatus["Pending"] = 0] = "Pending";
    MessageStatus[MessageStatus["Sent"] = 1] = "Sent";
})(MessageStatus || (MessageStatus = {}));
const HEARTBEAT_INTERVAL = 12000;
export class LoraClientService {
    serviceUrl = 'https://feynsinn.explore.de/lora-minirag';
    url = undefined;
    socket = null;
    isConnected = false;
    isError = false;
    messages = [];
    messagesQueue = [];
    listeners = {};
    heartBeatInterval = 0;
    async createSession(token) {
        const response = await window.fetch(`${this.serviceUrl}/session`, {
            headers: { 'x-api-token': token }
        });
        return response.status === 200 ? await response.text() : undefined;
    }
    async connect(options) {
        const sessionId = options.sessionId;
        this.url = options.url ?? `${this.serviceUrl}/ws/${sessionId}`.replace('https://', 'wss://').replace('http://', 'ws://');
        if (!sessionId) {
            throw new ClientError('Can not start connection: session id not set.');
        }
        if (!this.url) {
            throw new ClientError('Can not start connection: server url not set.');
        }
        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
            throw new ClientError('WebSocket connection is already open or opening.');
        }
        let oldMessages = [];
        let resolvePromise;
        let rejectPromise;
        const promise = new Promise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
        });
        this.emitStatus(ConnectionStatus.CONNECTING);
        this.isError = false;
        this.isConnected = false;
        try {
            if (options.loadHistory) {
                oldMessages = await this.getMessagesHistory(sessionId);
            }
            this.socket = new WebSocket(this.url);
            this.socket.onopen = () => {
                oldMessages.forEach(message => this.addMessage(message));
                this.isConnected = true;
                this.startHeartBeat();
                this.emitStatus(ConnectionStatus.CONNECTED);
                resolvePromise();
            };
            this.socket.onmessage = (event) => {
                const response = event.data;
                if (response === 'ping' || response === 'pong')
                    return;
                if (typeof response === 'string') {
                    this.onSocketMessage(response);
                }
            };
            this.socket.onclose = () => {
                this.isConnected = false;
                this.stopHeartBeat();
                this.emitStatus(this.isError ? ConnectionStatus.ERROR : ConnectionStatus.DISCONNECTED);
            };
            this.socket.onerror = (event) => {
                this.isError = true;
                rejectPromise?.(event);
            };
        }
        catch (e) {
            console.error(e);
            return;
        }
        return promise;
    }
    async getMessagesHistory(sessionId) {
        const response = await window.fetch(`${this.serviceUrl}/${sessionId}/messages`);
        const data = await response.json();
        const messages = (data || []).map((item) => {
            const message = {
                id: item.messageId,
                user: item.loraMessage ? 'lora' : 'me',
                content: item.text,
                time: item.creationDate,
                parts: item.parts
            };
            return message;
        });
        return messages.reverse();
    }
    sendMessage(message) {
        this.pushMessageToQueue(message);
        this.processQueue();
    }
    onSocketMessage(data) {
        let json = undefined;
        let content = '';
        let parts = [];
        try {
            json = JSON.parse(data);
            content = json.answer;
            parts = json.parts;
        }
        catch (e) {
            content = data;
        }
        const message = { id: crypto.randomUUID(), user: 'lora', content, parts, time: Date.now() };
        this.addMessage(message);
    }
    processQueue() {
        const message = this.messagesQueue.pop();
        if (!message)
            return;
        this.addMessage({ id: message.id, user: 'me', time: Date.now(), content: message.content });
        this.socket?.send(message?.content);
        message.status = MessageStatus.Sent;
    }
    pushMessageToQueue(message) {
        const id = crypto.randomUUID();
        this.messagesQueue.push({
            id,
            content: message,
            status: MessageStatus.Pending
        });
    }
    addMessage(message) {
        this.messages.push(message);
        this.emitMessage(message);
    }
    emitMessage(message) {
        this.listeners.message?.forEach(listener => {
            try {
                listener(message);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    emitStatus(status) {
        this.listeners.status?.forEach(listener => {
            try {
                listener(status);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    on(event, listener) {
        if (!this.listeners[event]) {
            this.listeners[event] = [];
        }
        this.listeners[event].push(listener);
    }
    off(event, listener) {
        const data = this.listeners[event];
        const index = data.indexOf(listener);
        if (index >= 0) {
            this.listeners[event].splice(index, 1);
        }
    }
    getMessages() {
        return [...this.messages];
    }
    disconnect() {
        this.messages = [];
        this.messagesQueue = [];
        if (this.socket) {
            this.socket.close(1000, "Closed by client");
        }
    }
    sendHeartBeat() {
        if (this.isConnected) {
            this.socket?.send('ping');
        }
    }
    startHeartBeat() {
        this.heartBeatInterval = window.setInterval(() => {
            this.sendHeartBeat();
        }, HEARTBEAT_INTERVAL);
    }
    stopHeartBeat() {
        window.clearInterval(this.heartBeatInterval);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9yYS1jbGllbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sb3JhLWNsaWVudC9zcmMvc2VydmljZXMvbG9yYS1jbGllbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDOztBQUUvQyxNQUFNLENBQU4sSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBQzFCLGlEQUE2QixDQUFBO0lBQzdCLDJDQUF1QixDQUFBO0lBQ3ZCLDZDQUF5QixDQUFBO0lBQ3pCLG1DQUFlLENBQUE7QUFDakIsQ0FBQyxFQUxXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFLM0I7QUFFRCxJQUFLLGFBR0o7QUFIRCxXQUFLLGFBQWE7SUFDaEIsdURBQU8sQ0FBQTtJQUNQLGlEQUFJLENBQUE7QUFDTixDQUFDLEVBSEksYUFBYSxLQUFiLGFBQWEsUUFHakI7QUFVRCxNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQztBQUdqQyxNQUFNLE9BQU8saUJBQWlCO0lBQ3BCLFVBQVUsR0FBRywwQ0FBMEMsQ0FBQztJQUN4RCxHQUFHLEdBQXVCLFNBQVMsQ0FBQztJQUNwQyxNQUFNLEdBQXFCLElBQUksQ0FBQztJQUNoQyxXQUFXLEdBQVksS0FBSyxDQUFDO0lBQzdCLE9BQU8sR0FBWSxLQUFLLENBQUM7SUFDekIsUUFBUSxHQUFvQixFQUFFLENBQUM7SUFDL0IsYUFBYSxHQUEwQixFQUFFLENBQUM7SUFDMUMsU0FBUyxHQUE0QyxFQUFFLENBQUM7SUFDeEQsaUJBQWlCLEdBQVcsQ0FBQyxDQUFDO0lBRXRDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBYTtRQUMvQixNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxVQUFVLEVBQUU7WUFDaEUsT0FBTyxFQUFFLEVBQUMsYUFBYSxFQUFFLEtBQUssRUFBQztTQUNoQyxDQUFDLENBQUM7UUFDSCxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQW1FO1FBQy9FLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDcEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsT0FBTyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFekgsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLFdBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxJQUFJLFdBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQy9ELE1BQU0sSUFBSSxXQUFXLENBQUMsa0RBQWtELENBQUMsQ0FBQztRQUM1RSxDQUFDO1FBRUQsSUFBSSxXQUFXLEdBQW9CLEVBQUUsQ0FBQztRQUN0QyxJQUFJLGNBQXlDLENBQUM7UUFDOUMsSUFBSSxhQUFvQyxDQUFDO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzlDLGNBQWMsR0FBRyxPQUFPLENBQUM7WUFDekIsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUV6QixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDO1lBRUgsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3hCLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUN4QixXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUV6RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztnQkFFeEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUU1QyxjQUFjLEVBQUUsQ0FBQztZQUNuQixDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNoQyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUM1QixJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLE1BQU07b0JBQUUsT0FBTztnQkFFdkQsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUUsQ0FBQztvQkFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDakMsQ0FBQztZQUNILENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pGLENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixhQUFhLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUM7UUFHSixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTztRQUNULENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQixDQUFDLFNBQWlCO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxXQUFXLENBQUMsQ0FBQztRQUNoRixNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUM5QyxNQUFNLE9BQU8sR0FBa0I7Z0JBQzdCLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUztnQkFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtnQkFDdEMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSzthQUNsQixDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQWU7UUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sZUFBZSxDQUFDLElBQVk7UUFDbEMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3JCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLEtBQUssR0FBRyxFQUF1RCxDQUFDO1FBQ3BFLElBQUksQ0FBQztZQUNILElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3RCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3JCLENBQUM7UUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNqQixDQUFDO1FBQ0QsTUFBTSxPQUFPLEdBQUcsRUFBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFDLENBQUM7UUFDcEcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU8sWUFBWTtRQUNsQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTztRQUVyQixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQTtRQUN6RixJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxPQUFlO1FBQ3hDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUUvQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztZQUN0QixFQUFFO1lBQ0YsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLGFBQWEsQ0FBQyxPQUFPO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxVQUFVLENBQUMsT0FBc0I7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU8sV0FBVyxDQUFDLE9BQXNCO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUM7Z0JBQ0gsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxNQUF3QjtRQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDO2dCQUNILFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQixDQUFDO1lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxFQUFFLENBQW1CLEtBQVEsRUFBRSxRQUEyQjtRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsR0FBRyxDQUFtQixLQUFRLEVBQUUsUUFBMkI7UUFDekQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQVUsQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXJDLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlDLENBQUM7SUFDSCxDQUFDO0lBR08sYUFBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDO0lBQ0gsQ0FBQztJQUVPLGNBQWM7UUFDcEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQy9DLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUN0QixDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU8sYUFBYTtRQUNuQixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7dUdBeE5VLGlCQUFpQjsyR0FBakIsaUJBQWlCLGNBREwsTUFBTTs7MkZBQ2xCLGlCQUFpQjtrQkFEN0IsVUFBVTttQkFBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDbGllbnRNZXNzYWdlfSBmcm9tIFwiLi4vdHlwZXMvQ2xpZW50TWVzc2FnZVwiO1xuaW1wb3J0IENsaWVudEVycm9yIGZyb20gXCIuLi90eXBlcy9DbGllbnRFcnJvclwiO1xuXG5leHBvcnQgZW51bSBDb25uZWN0aW9uU3RhdHVzIHtcbiAgRElTQ09OTkVDVEVEID0gJ2Rpc2Nvbm5lY3RlZCcsXG4gIENPTk5FQ1RFRCA9ICdjb25uZWN0ZWQnLFxuICBDT05ORUNUSU5HID0gJ2Nvbm5lY3RpbmcnLFxuICBFUlJPUiA9ICdlcnJvcicsXG59XG5cbmVudW0gTWVzc2FnZVN0YXR1cyB7XG4gIFBlbmRpbmcsXG4gIFNlbnQsXG59XG5cbnR5cGUgTWVzc2FnZVF1ZXVlTWVzc2FnZSA9IHsgaWQ6IHN0cmluZywgY29udGVudDogYW55LCBzdGF0dXM6IE1lc3NhZ2VTdGF0dXMgfTtcbnR5cGUgRXZlbnRzID0gJ21lc3NhZ2UnIHwgJ3N0YXR1cyc7XG5cbmludGVyZmFjZSBFdmVudExpc3RlbmVycyB7XG4gIG1lc3NhZ2U6IChtZXNzYWdlOiBDbGllbnRNZXNzYWdlKSA9PiB2b2lkO1xuICBzdGF0dXM6IChzdGF0dXM6IENvbm5lY3Rpb25TdGF0dXMpID0+IHZvaWQ7XG59XG5cbmNvbnN0IEhFQVJUQkVBVF9JTlRFUlZBTCA9IDEyMDAwO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBMb3JhQ2xpZW50U2VydmljZSB7XG4gIHByaXZhdGUgc2VydmljZVVybCA9ICdodHRwczovL2ZleW5zaW5uLmV4cGxvcmUuZGUvbG9yYS1taW5pcmFnJztcbiAgcHJpdmF0ZSB1cmw6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBzb2NrZXQ6IFdlYlNvY2tldCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGlzQ29ubmVjdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgaXNFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIG1lc3NhZ2VzOiBDbGllbnRNZXNzYWdlW10gPSBbXTtcbiAgcHJpdmF0ZSBtZXNzYWdlc1F1ZXVlOiBNZXNzYWdlUXVldWVNZXNzYWdlW10gPSBbXTtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHsgW0sgaW4gRXZlbnRzXT86IEV2ZW50TGlzdGVuZXJzW0tdW10gfSA9IHt9O1xuICBwcml2YXRlIGhlYXJ0QmVhdEludGVydmFsOiBudW1iZXIgPSAwO1xuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24odG9rZW46IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LmZldGNoKGAke3RoaXMuc2VydmljZVVybH0vc2Vzc2lvbmAsIHtcbiAgICAgIGhlYWRlcnM6IHsneC1hcGktdG9rZW4nOiB0b2tlbn1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgPyBhd2FpdCByZXNwb25zZS50ZXh0KCkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyBjb25uZWN0KG9wdGlvbnM6IHsgc2Vzc2lvbklkOiBzdHJpbmcsIHVybD86IHN0cmluZywgbG9hZEhpc3Rvcnk/OiBib29sZWFuIH0pIHtcbiAgICBjb25zdCBzZXNzaW9uSWQgPSBvcHRpb25zLnNlc3Npb25JZDtcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsID8/IGAke3RoaXMuc2VydmljZVVybH0vd3MvJHtzZXNzaW9uSWR9YC5yZXBsYWNlKCdodHRwczovLycsICd3c3M6Ly8nKS5yZXBsYWNlKCdodHRwOi8vJywgJ3dzOi8vJyk7XG5cbiAgICBpZiAoIXNlc3Npb25JZCkge1xuICAgICAgdGhyb3cgbmV3IENsaWVudEVycm9yKCdDYW4gbm90IHN0YXJ0IGNvbm5lY3Rpb246IHNlc3Npb24gaWQgbm90IHNldC4nKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnVybCkge1xuICAgICAgdGhyb3cgbmV3IENsaWVudEVycm9yKCdDYW4gbm90IHN0YXJ0IGNvbm5lY3Rpb246IHNlcnZlciB1cmwgbm90IHNldC4nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5DTE9TRUQpIHtcbiAgICAgIHRocm93IG5ldyBDbGllbnRFcnJvcignV2ViU29ja2V0IGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBvcGVuIG9yIG9wZW5pbmcuJyk7XG4gICAgfVxuXG4gICAgbGV0IG9sZE1lc3NhZ2VzOiBDbGllbnRNZXNzYWdlW10gPSBbXTtcbiAgICBsZXQgcmVzb2x2ZVByb21pc2U6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQ7XG4gICAgbGV0IHJlamVjdFByb21pc2U6ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgICAgcmVqZWN0UHJvbWlzZSA9IHJlamVjdDtcblxuICAgIH0pXG4gICAgdGhpcy5lbWl0U3RhdHVzKENvbm5lY3Rpb25TdGF0dXMuQ09OTkVDVElORyk7XG4gICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcblxuICAgICAgaWYgKG9wdGlvbnMubG9hZEhpc3RvcnkpIHtcbiAgICAgICAgb2xkTWVzc2FnZXMgPSBhd2FpdCB0aGlzLmdldE1lc3NhZ2VzSGlzdG9yeShzZXNzaW9uSWQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQodGhpcy51cmwpO1xuICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gKCkgPT4ge1xuICAgICAgICBvbGRNZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4gdGhpcy5hZGRNZXNzYWdlKG1lc3NhZ2UpKTtcblxuICAgICAgICB0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnN0YXJ0SGVhcnRCZWF0KCk7XG4gICAgICAgIHRoaXMuZW1pdFN0YXR1cyhDb25uZWN0aW9uU3RhdHVzLkNPTk5FQ1RFRCk7XG5cbiAgICAgICAgcmVzb2x2ZVByb21pc2UoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc29ja2V0Lm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gJ3BpbmcnIHx8IHJlc3BvbnNlID09PSAncG9uZycpIHJldHVybjtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMub25Tb2NrZXRNZXNzYWdlKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5zb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0b3BIZWFydEJlYXQoKTtcbiAgICAgICAgdGhpcy5lbWl0U3RhdHVzKHRoaXMuaXNFcnJvciA/IENvbm5lY3Rpb25TdGF0dXMuRVJST1IgOiBDb25uZWN0aW9uU3RhdHVzLkRJU0NPTk5FQ1RFRCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdFByb21pc2U/LihldmVudCk7XG4gICAgICB9O1xuXG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgZ2V0TWVzc2FnZXNIaXN0b3J5KHNlc3Npb25JZDogc3RyaW5nKTogUHJvbWlzZTxDbGllbnRNZXNzYWdlW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5mZXRjaChgJHt0aGlzLnNlcnZpY2VVcmx9LyR7c2Vzc2lvbklkfS9tZXNzYWdlc2ApO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSAoZGF0YSB8fCBbXSkubWFwKChpdGVtOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IENsaWVudE1lc3NhZ2UgPSB7XG4gICAgICAgIGlkOiBpdGVtLm1lc3NhZ2VJZCxcbiAgICAgICAgdXNlcjogaXRlbS5sb3JhTWVzc2FnZSA/ICdsb3JhJyA6ICdtZScsXG4gICAgICAgIGNvbnRlbnQ6IGl0ZW0udGV4dCxcbiAgICAgICAgdGltZTogaXRlbS5jcmVhdGlvbkRhdGUsXG4gICAgICAgIHBhcnRzOiBpdGVtLnBhcnRzXG4gICAgICB9XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtZXNzYWdlcy5yZXZlcnNlKCk7XG4gIH1cblxuICBzZW5kTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnB1c2hNZXNzYWdlVG9RdWV1ZShtZXNzYWdlKTtcbiAgICB0aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNvY2tldE1lc3NhZ2UoZGF0YTogc3RyaW5nKSB7XG4gICAgbGV0IGpzb24gPSB1bmRlZmluZWQ7XG4gICAgbGV0IGNvbnRlbnQgPSAnJztcbiAgICBsZXQgcGFydHMgPSBbXSBhcyB7IFwiYW5sYWdlbktlbm56ZWljaGVuXCI6IHN0cmluZywgXCJnZW9cIjogc3RyaW5nIH1bXTtcbiAgICB0cnkge1xuICAgICAganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBjb250ZW50ID0ganNvbi5hbnN3ZXI7XG4gICAgICBwYXJ0cyA9IGpzb24ucGFydHM7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29udGVudCA9IGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSB7aWQ6IGNyeXB0by5yYW5kb21VVUlEKCkgYXMgc3RyaW5nLCB1c2VyOiAnbG9yYScsIGNvbnRlbnQsIHBhcnRzLCB0aW1lOiBEYXRlLm5vdygpfTtcbiAgICB0aGlzLmFkZE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NRdWV1ZSgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlc1F1ZXVlLnBvcCgpO1xuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuO1xuXG4gICAgdGhpcy5hZGRNZXNzYWdlKHtpZDogbWVzc2FnZS5pZCwgdXNlcjogJ21lJywgdGltZTogRGF0ZS5ub3coKSwgY29udGVudDogbWVzc2FnZS5jb250ZW50fSlcbiAgICB0aGlzLnNvY2tldD8uc2VuZChtZXNzYWdlPy5jb250ZW50KTtcbiAgICBtZXNzYWdlLnN0YXR1cyA9IE1lc3NhZ2VTdGF0dXMuU2VudDtcbiAgfVxuXG4gIHByaXZhdGUgcHVzaE1lc3NhZ2VUb1F1ZXVlKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGNvbnN0IGlkID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcblxuICAgIHRoaXMubWVzc2FnZXNRdWV1ZS5wdXNoKHtcbiAgICAgIGlkLFxuICAgICAgY29udGVudDogbWVzc2FnZSxcbiAgICAgIHN0YXR1czogTWVzc2FnZVN0YXR1cy5QZW5kaW5nXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZE1lc3NhZ2UobWVzc2FnZTogQ2xpZW50TWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcblxuICAgIHRoaXMuZW1pdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRNZXNzYWdlKG1lc3NhZ2U6IENsaWVudE1lc3NhZ2UpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5tZXNzYWdlPy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0U3RhdHVzKHN0YXR1czogQ29ubmVjdGlvblN0YXR1cykge1xuICAgIHRoaXMubGlzdGVuZXJzLnN0YXR1cz8uZm9yRWFjaChsaXN0ZW5lciA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lcihzdGF0dXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb248VCBleHRlbmRzIEV2ZW50cz4oZXZlbnQ6IFQsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyc1tUXSkge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICB9XG4gICAgKHRoaXMubGlzdGVuZXJzW2V2ZW50XSBhcyBhbnlbXSkucHVzaChsaXN0ZW5lcik7XG4gIH1cblxuICBvZmY8SyBleHRlbmRzIEV2ZW50cz4oZXZlbnQ6IEssIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyc1tLXSkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmxpc3RlbmVyc1tldmVudF0gYXMgYW55W107XG4gICAgY29uc3QgaW5kZXggPSBkYXRhLmluZGV4T2YobGlzdGVuZXIpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICh0aGlzLmxpc3RlbmVyc1tldmVudF0gYXMgW10pLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0TWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLm1lc3NhZ2VzXTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIHRoaXMubWVzc2FnZXNRdWV1ZSA9IFtdO1xuICAgIGlmICh0aGlzLnNvY2tldCkge1xuICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoMTAwMCwgXCJDbG9zZWQgYnkgY2xpZW50XCIpO1xuICAgIH1cbiAgfVxuXG5cbiAgcHJpdmF0ZSBzZW5kSGVhcnRCZWF0KCkge1xuICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnNvY2tldD8uc2VuZCgncGluZycpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRIZWFydEJlYXQoKSB7XG4gICAgdGhpcy5oZWFydEJlYXRJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnNlbmRIZWFydEJlYXQoKVxuICAgIH0sIEhFQVJUQkVBVF9JTlRFUlZBTCk7XG4gIH1cblxuICBwcml2YXRlIHN0b3BIZWFydEJlYXQoKSB7XG4gICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5oZWFydEJlYXRJbnRlcnZhbCk7XG4gIH1cblxufVxuIl19